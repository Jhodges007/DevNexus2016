DevOps Principles - ultimate goal
clouds/containers/microservices beneath in the pyramid

Docker: Linux container image (OS wrapper for your app)
  Redhat is the largest contributor outside of Docker Inc
Kubernetes: open-sourced by Google running/managing Docker containers at scale
  Redhat is largest contributor outside of Google (open_shift)
Ansible: Configuration management, app deployment, agentless automation engine

Docker High level architecture
Client: docker build - docker pull - docker run => docker daemon
Host: Daemon => containers/imgages  => registry

Docker container: "From", "Expose", "Copy", etc
pod: just a wrapper for the container

In production, you won't really do "docker run" over and over, so that's where

KUBERNETES comes into play
  Automatic load balancing

Vagrant commands:
  in vagrant, once docker image is created, do "docker run  -it -p 8000:8000 file/file"
  oc get pods
  oc get route
  oc edit route varname - this points all users to different route so if you need
  to take one down to work on etc
  oc scale --replicas [number of pods] -n

Docker build, docker run, launch into Kubernetes, etc.

Kubernetes Concepts:
  Container: docker container
  Pods: contains one or more containers
    shared IP
    Shared storage volume
    shared resource allocation
  labels: key/value pairs
  service: load balancing of multiple pods
  secrets: passwords etc are auto distributed

Caps:
  self healing
  Horizontal auto scaling
  etc

Openshift: things that are not available in base kubernetes
  Deployments
  Builds
  ImageStreams
  Controllers
    builds - routes - deployment

Hexboard - shows all activity and infrastructures created
  Example: 5 nodes (physical pieces of hardware) running
  Docker build/docker run are automated
  Custom dashboard produces rxjs base html 5 depiction of processes
  "instances" - you can see all that have been recently launched
  user interface can help navigate and do things

or you can ssh into it, and then -
set up how many containers you want:
oc scale rc sketchpad --replicas 108 -n demo
bit.ly/devnexus16

Demo:
json file - some of the fields:
"kind"
"api version"
"metadata"
  "name"
    "labels"
  "app"
"replicas"

To create a namespace you need a small yaml file. Namespace give you ability to
avoid name collisions
command line (with kubectl (pronounced "cube c-t-l")):
kubectl create -f guestbook-full.json
kubectl get pods
kubectl describe service [name] --namespace [name2]
kubectl delete all --all --namespace [name] to delete and clean all

ANSIBLE:
orchestration - configuration - management - agentless, push-based
automate complex tasks - provision cloud infrastructure
serial or parallel processing
declarative, idempotent, in order processing

core concepts:
  Module: base unit of execution
  Inventory: host data static or dynamic
  play: yaml description  of hosts to operate on
  playbook: grouping of plays
  role based

<openshift>
