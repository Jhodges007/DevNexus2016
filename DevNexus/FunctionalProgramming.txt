Functional Programming

(i) -> i * 2
Not a variable: nothing is mutating.  i is just pointing to i * 2 (mapping)
Functional should not be statement based/obj oriented, it should be functional
Should not have variables

History of computing and imperative languages

Object Oriented
[memory] -> [control unit] ->logic unit{accumulator}
which led to binary, then assembly, then statements w breaks/ifs (still in
Von Noymen architecture)
Then C++, then Java (memory/garbage collection/resources)

Functional
ML and F# = functional
Haskell = good language for "if"
Erlang = look this up on google (lean language/less codebase = less bugs)
Scala = heavily influenced by haskell and java

You don't need variables, you just need functions that compute things
Functional programming takes advantage of modern hardware advances
Functional programming is a simpler paradigm

public static int factorial(int n) {
  int acc = 1;
  for(int i = 1 ; i < n; i++)
  acc* = i;
  return i;
}

the programmer must juggle time and value (Less simple than only value)
- Fibonacci

val oneTo3 = [1, 2, 3];
val zeroTo3 = 0 :: oneTo3 (prepends the 0 onto the oneToThree) - oneTo3 does not
mutate, it is just added onto

functional programming is programming at a higher level of abstraction more than
simply eliminating mutability and variables

Example 2
JAVA VERSION:
public static boolean isPrime(int  n) {
  boolean isPrime = true;
  for(int i=2; i<n; i++) {
    if(n % i == 0) {
      isPrime = false;
      break;
    }
  }
  return isPrime;
}

SCALA VERSION:
def isPrime(n:Int) = (2 to (n-1))
  .forall(i => n % i != 0)
