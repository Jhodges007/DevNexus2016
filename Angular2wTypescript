Angular2:
  Complete rewrite of AngularJS
  Component-Based
  No controllers, scopes
  Better dependency injection
  Integrated RxJS
  Can write apps in TypeScript, Dart(Google's language), or JS(ES5 or ES6)

An app is a tree of components
  @Component:
    whatever you put as a "selector: ''" is exactly how you have to tag html
  @RouteConfig:
    set up route config
    path: '/', component: componentVarName, as: 'varname'

Project Structure
  App code >
              //files
              //filename.ts
              //page objects
              //etc
    SystemJS Loader's Config>
              //config.js
      App dependencies >
              //node_modules
        npm config >
              //uses package.json, such as when you 'npm install'
          tsconfig >
            Type definition files

  Exporting a module:
    export default class homeComponent {
      products: Product[]=[];

      constructor(private productService: ProductService) {
        this.products = this.productService.getProducts();
      }
    }

Typically a service is just a class
Sample Toolbox:
  Angular2 -> TypeScript
  TypeScript -> code quality tools (TSLint) / uses
            -> modules (SystemJS) / loads
      *transpiled to tsc
    -> JavaScript (ES5) -> es5
            -> Packages
            -> Test framework (Jasmine)
      -> bundled and optimized app (deploys npm scripts)
            ->deployed app

Transpiler converts to javascript

Typescript
  - was developed at Microsoft
  - is a superset of JavaScript
  - static type analysis
  - well supported by IDEs
  - benefits:
    - increases productivity in producing JS
    - supports types, classes, interfaces, generics, etc.

  Transpiling interactively
    TypeScript -> JavaScript

  Arrow functions (lambdas) - fix "this" problem

  Classes
    - with inheritance
    - with constructor
    - inheritance (maintains prototypal inheritance)
    - generics

  Interfaces as custom types
    - can declare them as interface
    - only helpful during development

  Typescript compiler (tsc)
    - install node.js from nodejs.org, comes w the npm
    - Install the typescript compiler
      npm install -g typescript
    - compile main.ts into main.js specifying target lang syntax
    tsc -t ES5 syntax
    - tsconfig.json
        - compilerOptions: {target, module}
    - SEE PHOTO FROM LECTURE SCREEN

  SystemJS

  Starting a new project with npm
    1. generate package.json for your project: npm init -y
    2. add angular dependencies  to package.json
    3. download dependencies into dir node_modules: npm install
    4. install live-server: npm install live-server -g

Templates and Binding
  unidirectional binding
    from code to template: <h1>Hello{{name}}!</h1>
    from template to code: <button (click)="placeBid()">Place Bid</button>
  2-way binding
    <input [(ngModel)] = "myComponentProperty">

Router and Dependency Injection
  Angular creates objects, not need to use the "new" operator
  can inject objs into components via constructors only
  Each component has an INJECTOR
  PROVIDERS specify how to inject
  If a component has no provider, Angular checks its parent
  Injecting dependencies of dependencies:
    http ->[angular injects]->ProductService->[angular injects]-> product
  Routing Directives
    Router outlet - where the router should render the component
    @RouteConfig - declare the path/component
    Routerlink -

Observables/HTTP
  Observable Streams - observable stream emits the data over
  time to the observer(subscriber)
    - Angular uses RxJS
    - Multiple operators can transform the stream's data
    - Stream Samples: ui events, HTTP responses, data arriving over websockets
    - the idea is that everything is an observable stream
      -can emit the next element
      -throw an error
      -send a signal that the streaming is over
  Observer provides:
    Function to handle streaming obj
    Error handling
    End of stream handling
  Transforming the stream:
    Emitter -> map() -> filter() -> Observer
  Observable v promises:
    Observables can return multiple values
    Observables can be cancelled
    Observables allow to handle end of stream similar to "finally" in Java
  Observable Events:
    (SEE SLIDE)
  
Deployment
