Javascript Intro to ES6

Targets/Containers
- browser
  - babel
- server
  "--harmony flag"

Module Adoption
  - Mongoose
  - React
  - rx.js(React.native)
  - gulp
  - angular (especially Angular DI)

Development Resources
  - newbs
  - framework developers
  - everyone

Simple Lang
  - impl: coffeescript, typescript
  - upside: terse, class approach, the good parts
  - downside: code gen, strange interopability, non-native

Let, Const
  - code
  - let creates variables that are locked into scopes just like Java
    variables in blocks
    - var vs let
  - constant variables (const) are immutable

Destructurizing
  - simplified parameterizing
  - deconstructed assignments
  - default params, rest, spread

  node --v8 options

  Object literals are the opposite side of destructurizing

Arrow Functions
  (primer) -> {function}
  let(a, b) -> {//do something w a and b}
  if same line, don't even need {}

Template Strings
Collections
  - map, set, weakMap, WeakSet
  - Weak references
  var s = new Set();
  s.add("hello").add("goodbye").add("nevermind");

  let key = {
    m:"myKey"
  }
  var weakMap = new WeakMap();
  weakMap.set(key, value)

Symbols
  - like Ruby
  - performance
  - a way to define a constant and not have to pass strings
  - let varname = Symbol();
    - let varname = Symbol.for("name");

Iterators, For ... of

Generators
 - probably the biggest leap for devs in js
 - abstract out asyncronous calls
 - let iterable = generator[Symbol.iterator]();
 function* generator_ex(){
 //define function
 }
 let varname = generator_ex();

Promise Libraries
  - functional scope
  - 3rd parties
  - .then, .catch, etc

Native Promises
  - generators!
  - new Promise(function(var2, var3){
    setTimeout(function(){
      resolve(xyz);
    })
    //code
  });
  - return val will be whatever is in the resolve call

Look up proxies
Look up modules
  - (old school was AMD)
  - commonjs
  - Enhanced export
Classes
 - use class keeper
 - define method w paramaters
 - can use getters and setters
 - can also use static - returns in all caps

Inheritance
  - varname1 extends varname

The Future
  - functional?
    - class decorators
    - class properties
    - rest, spread on properties
    - typed objects
  - bind operator - function binding, method abstraction
  - async functions

ecmascript.org

s3.amazonaws.com/barrelproofapps/dev-nexus/es6.pdf
github.com/barrel-proof-apps/es6-talk
